/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package e_commerce;

import Product.Product;
import Product.ProductFactory;
import connection.connect;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kerol_3obfacr
 */
public class ProductsManagement extends javax.swing.JFrame {

    /**
     * Creates new form Management
     */
    public ProductsManagement() {
        initComponents();
        Display_Products();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductName_TextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ProductType_ComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        ProductPrice_TextField = new javax.swing.JTextField();
        ProductQuantity_TextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        BSave_Button = new javax.swing.JButton();
        BEdit_Button = new javax.swing.JButton();
        BDelete_Button = new javax.swing.JButton();
        BReset_Button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Book_Table = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        Orders = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Product Name");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Product Type");

        ProductType_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electronics", "Clothing", "Home Appliances" }));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Price");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Quantity");

        BSave_Button.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BSave_Button.setText("Save");
        BSave_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSave_ButtonActionPerformed(evt);
            }
        });

        BEdit_Button.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BEdit_Button.setText("Edit");
        BEdit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEdit_ButtonActionPerformed(evt);
            }
        });

        BDelete_Button.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BDelete_Button.setText("Delete");
        BDelete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDelete_ButtonActionPerformed(evt);
            }
        });

        BReset_Button.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BReset_Button.setText("Reset");
        BReset_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BReset_ButtonActionPerformed(evt);
            }
        });

        Book_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Category", "Stock", "Price"
            }
        ));
        Book_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Book_TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Book_Table);

        jToggleButton1.setText("Log Out");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        Orders.setText("Order Managment");
        Orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addComponent(ProductName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BSave_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ProductType_ComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 171, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(BEdit_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BDelete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(BReset_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ProductQuantity_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(103, 103, 103)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ProductPrice_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(36, 36, 36)))
                        .addGap(63, 63, 63))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 855, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Orders)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProductPrice_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ProductType_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ProductQuantity_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProductName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BDelete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BReset_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BSave_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BEdit_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(Orders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void Products_Reset() {
        ProductName_TextField.setText("");
        ProductPrice_TextField.setText("");
        ProductQuantity_TextField.setText("");
        ProductType_ComboBox.setSelectedIndex(0);
    }

    public void Display_Products() {
        Connection conn = null;
        ResultSet rs = null;
        try {
            conn = connect.getConnection(); // Use the reusable connection
            String query = "SELECT * FROM products";

            try ( Statement stmt = conn.createStatement()) {
                rs = stmt.executeQuery(query);

                // Get the table model and clear existing rows
                DefaultTableModel model = (DefaultTableModel) Book_Table.getModel();
                model.setRowCount(0);

                // Populate the table with data from the ResultSet
                while (rs.next()) {
                    String product_name = rs.getString("product_name");
                    String product_type = rs.getString("product_type");
                    String product_quantity = rs.getString("product_quantity");
                    String product_price = rs.getString("product_price");

                    model.addRow(new String[]{product_name, product_type, product_quantity, product_price});
                }
            }
        } catch (SQLException e) {
            System.out.println("Error while displaying books: " + e.getMessage());
        }
    }


    private void BSave_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSave_ButtonActionPerformed
        String name = ProductName_TextField.getText();
        String category = (String) ProductType_ComboBox.getSelectedItem();
        int selectedIndex = ProductType_ComboBox.getSelectedIndex();
        String quantity = ProductQuantity_TextField.getText();
        String price = ProductPrice_TextField.getText();
        String query;
        Connection conn = null;

        if (name.isEmpty() || category.isEmpty() || quantity.isEmpty() || price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Missing cells");
        } else if (Integer.parseInt(price) <= 0 || Integer.parseInt(quantity) <= 0) {
            JOptionPane.showMessageDialog(this, "Enter a positive value");
        } else {
            try {
                Product product = ProductFactory.createProduct(selectedIndex + 1, name, quantity, price);
                conn = connect.getConnection();

                query = "INSERT INTO products (product_name, product_quantity, product_price, product_type) VALUES ('" + product.getName() + "', '" + product.getQuantity() + "', '" + product.getPrice() + "', '" + product.getCategory() + "')";
                conn.createStatement().executeUpdate(query);

                JOptionPane.showMessageDialog(this, "Product added");
                Products_Reset();
                Display_Products();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_BSave_ButtonActionPerformed

    private void BEdit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEdit_ButtonActionPerformed
        String name = ProductName_TextField.getText();
        String category = (String) ProductType_ComboBox.getSelectedItem();
        String quantityStr = ProductQuantity_TextField.getText();
        String priceStr = ProductPrice_TextField.getText();

        if (name.isEmpty() || category.isEmpty() || quantityStr.isEmpty() || priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled.", "Missing Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int quantity = Integer.parseInt(quantityStr);
            double price = Double.parseDouble(priceStr);

            if (quantity <= 0 || price <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity and price must be positive values.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Connection conn = null;
            try {
                conn = connect.getConnection(); // Use the reusable connection
                String query = "UPDATE products SET product_name = ?, product_quantity = ?, product_price = ?, product_type = ? WHERE product_name = ?";

                try ( PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, name);
                    pstmt.setInt(2, quantity);
                    pstmt.setDouble(3, price);
                    pstmt.setString(4, category);
                    pstmt.setString(5, name); // Replace `id` with the actual identifier (name, id, etc.)

                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Product updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No Product found with the specified name.", "Update Failed", JOptionPane.WARNING_MESSAGE);
                    }
                }

                // Reset form and refresh book display
                Products_Reset();
                Display_Products();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity and price must be numeric.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BEdit_ButtonActionPerformed

    private void BDelete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDelete_ButtonActionPerformed
        String name = ProductName_TextField.getText();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You must a cell");
        } else {
            Connection conn = null;
            try {
                conn = connect.getConnection();
                String query = "DELETE FROM products WHERE product_name = ?";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, name);
                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Product Deleted");
                } else {
                    JOptionPane.showMessageDialog(this, "Product not found");
                }

                Display_Products();
                Products_Reset();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occurred while deleting the product");
            }
        }
    }//GEN-LAST:event_BDelete_ButtonActionPerformed

    private void BReset_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BReset_ButtonActionPerformed
        Products_Reset();
    }//GEN-LAST:event_BReset_ButtonActionPerformed

    private void Book_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Book_TableMouseClicked
        DefaultTableModel model = (DefaultTableModel) Book_Table.getModel();
        int index = Book_Table.getSelectedRow();

        ProductName_TextField.setText(model.getValueAt(index, 0).toString());
        ProductType_ComboBox.setSelectedItem(model.getValueAt(index, 1).toString());
        ProductQuantity_TextField.setText(model.getValueAt(index, 2).toString());
        ProductPrice_TextField.setText(model.getValueAt(index, 3).toString());

        String id = model.getValueAt(index, 0).toString();
    }//GEN-LAST:event_Book_TableMouseClicked

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void OrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new OrdersManagement().setVisible(true);
    }//GEN-LAST:event_OrdersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductsManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BDelete_Button;
    private javax.swing.JButton BEdit_Button;
    private javax.swing.JButton BReset_Button;
    private javax.swing.JButton BSave_Button;
    private javax.swing.JTable Book_Table;
    private javax.swing.JButton Orders;
    private javax.swing.JTextField ProductName_TextField;
    private javax.swing.JTextField ProductPrice_TextField;
    private javax.swing.JTextField ProductQuantity_TextField;
    private javax.swing.JComboBox<String> ProductType_ComboBox;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
